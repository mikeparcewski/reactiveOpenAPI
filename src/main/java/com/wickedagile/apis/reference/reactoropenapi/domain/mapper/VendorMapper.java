package com.wickedagile.apis.reference.reactoropenapi.domain.mapper;

import com.wickedagile.apis.reference.reactoropenapi.domain.ContactDetail;
import com.wickedagile.apis.reference.reactoropenapi.domain.Vendor;
import com.wickedagile.apis.reference.reactoropenapi.dto.ContactDetailDto;
import com.wickedagile.apis.reference.reactoropenapi.dto.VendorCreateDto;
import com.wickedagile.apis.reference.reactoropenapi.dto.VendorDto;
import java.util.List;

import org.mapstruct.Mapper;
import org.mapstruct.MappingConstants;
import org.mapstruct.MappingTarget;
import org.mapstruct.NullValuePropertyMappingStrategy;
import org.mapstruct.ValueMapping;
import org.mapstruct.ValueMappings;
import reactor.core.publisher.Mono;

/**
 * Mapstruct based implementation to support mapping from DTO's (Generated by OpenAPI)
 * to Models.  NOTE: We separate these so the underlying data interface can change
 * without necessarily having to change the contract(s)
 */
@Mapper(componentModel = "spring",
    nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE)
public interface VendorMapper {

  /**
   * convenience method for converting a vendorcreatedto (hack contract) stream to a vendorDto (contract) stream
   *
   * @param mono the object to convert
   * @return the dto stream for use
   */
  default Mono<VendorDto> vendorCreateDtoToVendorDtoMono(Mono<VendorCreateDto> mono) {
    return mono.map(this::vendorCreateDtoToVendorDto);
  }

  /**
   * map for the required fields hack
   *
   * @param vendorCreateDto the object to transform
   * @return a DTO object for use in API
   */
  VendorDto vendorCreateDtoToVendorDto(VendorCreateDto vendorCreateDto);

  /**
   * simple map from vendor (model) to vendorDto (contract)
   *
   * @param source the vendor object to be converted
   * @return a DTO object for use in API
   */
  VendorDto vendorToVendorDto(Vendor source);

  /**
   * simple map from vendorDto (contract) to vendor (model)
   *
   * @param source the object to be converted
   * @return a vendor object for saving/manipulation
   */
  Vendor vendorDtoToVendor(VendorDto source);


  /**
   * converts a list of vendors (model) to vendorDtos (contract)
   *
   * @param source the vendors to convert
   * @return the DTO objects for use in API
   */
  List<VendorDto> vendorToVendorDto(List<Vendor> source);

  /**
   * convenience method for converting a vendor (modeL) stream to a vendorDto (contract) stream
   *
   * @param mono the object to convert
   * @return the dto stream for use
   */
  default Mono<VendorDto> vendorToVendorDto(Mono<Vendor> mono) {
    return mono.map(this::vendorToVendorDto);
  }

  /**
   * convenience method for converting a vendorDto (contract) stream to a vendor (model) stream
   *
   * @param mono the object to convert
   * @return the vendor stream for use
   */
  default Mono<Vendor> vendorDtoToVendor(Mono<VendorDto> mono) {
    return mono.map(this::vendorDtoToVendor);
  }

  /**
   * handle merging of vendor object - particularly useful for "merging" changes in for changes
   *
   * @param target the existing entity
   * @param source an object with the details to override in the target
   * @return a merged vendor object
   */
  Vendor updateVendor(@MappingTarget Vendor target, Vendor source);

  /**
   * converts a list of contactdto's (contract) to contacts (model)
   *
   * @param source the contactdetails to convert
   * @return the objects for use saving/manipulation
   */
  List<ContactDetail> contactDetailDtoToContactDetail(List<ContactDetailDto> source);

  /**
   * converts a list of contacts (model) to contactdtos (contract)
   *
   * @param source the objects to convert
   * @return the objects for use in API
   */
  List<ContactDetailDto> contactDetailToContactDetailDto(List<ContactDetail> source);


  /**
   * simple map from contactdto (contract) to contact (model)
   *
   * @param source the object to be converted
   * @return an object for use in manipulating/saving
   */
  @ValueMappings({
      @ValueMapping(source = "OFFICE", target = "TYPE_OFFICE"),
      @ValueMapping(source = "REPRESENTATIVE", target = "TYPE_REPRESENTATIVE"),
      @ValueMapping(source = "ALTERNATIVE", target = "TYPE_ALTERNATIVE"),
      @ValueMapping(source = MappingConstants.ANY_REMAINING, target = "TYPE_OFFICE")
  })
  ContactDetail contactDetailDtoToContactDetail(ContactDetailDto source);

  /**
   * simple map from contact (model) to contact (contract)
   *
   * @param source the object to be converted
   * @return a DTO object for use in API
   */
  @ValueMappings({
      @ValueMapping(source = "TYPE_OFFICE", target = "OFFICE"),
      @ValueMapping(source = "TYPE_REPRESENTATIVE", target = "REPRESENTATIVE"),
      @ValueMapping(source = "TYPE_ALTERNATIVE", target = "ALTERNATIVE"),
      @ValueMapping(source = MappingConstants.ANY_REMAINING, target = "OFFICE")
  })
  ContactDetailDto contactDetailToContactDetailDto(ContactDetail source);

  /**
   * handle merging of contactdetails object - particularly useful for "merging" changes in for changes
   *
   * @param target the existing entity
   * @param source an object with the details to override in the target
   * @return a merged object
   */
  ContactDetail updateContactDetail(@MappingTarget ContactDetail target, ContactDetail source);


}
